/*
 *   Student = Jervine Chacko
 *   Class = 4380 MW 1:00pm
 */

package csc4380.jchacko1.assignment3;

import java.awt.Color;
import java.awt.event.KeyEvent;

/**
 *
 * @author admin
 */
public class CipherGui extends javax.swing.JFrame {

    /**
     * Creates new form CipherGui
     */
    public CipherGui() {
        initComponents();
        
        //Centers Window
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCipher = new javax.swing.JTextArea();
        btnEncrypt = new javax.swing.JButton();
        btnDecrypt = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtKey = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuRedText = new javax.swing.JMenuItem();
        cbmnuEditable = new javax.swing.JCheckBoxMenuItem();
        mnuClear = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Jervine Chacko");

        txtMessage.setColumns(20);
        txtMessage.setRows(5);
        txtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMessageKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtMessage);

        txtCipher.setColumns(20);
        txtCipher.setRows(5);
        jScrollPane2.setViewportView(txtCipher);

        btnEncrypt.setText("Encrypt");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncryptActionPerformed(evt);
            }
        });

        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecryptActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtKey.setText("0");

        jMenu1.setText("File");

        mnuRedText.setText("Red Text");
        mnuRedText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRedTextActionPerformed(evt);
            }
        });
        jMenu1.add(mnuRedText);

        cbmnuEditable.setSelected(true);
        cbmnuEditable.setText("Enable Editing");
        cbmnuEditable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbmnuEditableActionPerformed(evt);
            }
        });
        jMenu1.add(cbmnuEditable);

        mnuClear.setText("Clear");
        mnuClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClear);

        mnuExit.setText("EXIT");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 100, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEncrypt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDecrypt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncrypt)
                    .addComponent(btnDecrypt)
                    .addComponent(btnClear)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);

    }//GEN-LAST:event_mnuExitActionPerformed

    private void btnDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecryptActionPerformed
        // TODO add your handling code here:
        
        bEncryptOrDecrypt = true;
        
        strClear = null;
        //Clears Current textfield
        txtCipher.setText(null);
        
        //Clears String for concurrent runs
        strCipher = "";
        
        //Gets Text from Textfield
       // if(txtCipher.getText().equals(null)){
            strMessage = txtMessage.getText();
       // }
        //else{
        //    strMessage = txtCipher.getText();
      //  }
        
        //Converts to Array of Char;
        
        char[] arrMessage = strMessage.toCharArray();
        //Character.isLetter(arrMessage[0]);
        
        //Gets Key
        intKey = Integer.parseInt(txtKey.getText());
        for(intCounter = 0; intCounter < arrMessage.length; intCounter++){
            temp = arrMessage[intCounter];
            
            if(Character.isUpperCase(temp)){
                temp = (char) (((temp - 'Z' - intKey) % 26) + 'Z');
            }
            if(Character.isLowerCase(temp)){
                temp = (char) (((temp - 'z' - intKey) % 26) + 'z');
            }
            
            //if(strCipher.isEmpty()){
            //   strCipher = Character.toString(temp);
            //}
            
            strCipher = strCipher + Character.toString(temp);
        }
        
        txtCipher.setText(strCipher);
    }//GEN-LAST:event_btnDecryptActionPerformed

    private void btnEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncryptActionPerformed
        // TODO add your handling code here:
        bEncryptOrDecrypt = false;
        
        strClear = null;
        //Clears cipher textfield
        txtCipher.setText(null);
        
        //Clears String for concurrent runs
        strCipher = "";
        
        //Gets Text from Textfield
       // if(txtCipher.getText().equals(null)){
            strMessage = txtMessage.getText();
       // }
        //else{
        //    strMessage = txtCipher.getText();
      //  }
        
        //Converts to Array of Char;
        
        char[] arrMessage = strMessage.toCharArray();
        //Character.isLetter(arrMessage[0]);
        
        //Gets Key
        intKey = Integer.parseInt(txtKey.getText());
        for(intCounter = 0; intCounter < arrMessage.length; intCounter++){
            temp = arrMessage[intCounter];
            
            if(Character.isUpperCase(temp)){
                temp = (char) (((temp - 'A' + intKey) % 26) + 'A');
            }
            if(Character.isLowerCase(temp)){
                temp = (char) (((temp - 'a' + intKey) % 26) + 'a');
            }
            
            //if(strCipher.isEmpty()){
            //   strCipher = Character.toString(temp);
            //}
            
            strCipher = strCipher + Character.toString(temp);
        }
        
        txtCipher.setText(strCipher);
    }//GEN-LAST:event_btnEncryptActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
       txtMessage.setText(strClear);
       txtCipher.setText(strClear);
       txtMessage.setForeground(Color.black);
       txtCipher.setForeground(Color.black);
      
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtMessageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyTyped
        // TODO add your handling code here:
         strClear = null;
         
         //Sees if editable or not
         if(edit){
            return;
        } 
         
        
        //Clears cipher textfield
        txtCipher.setText(null);
        
        //Clears String for concurrent runs
        strCipher = "";
        
        //Gets Text from Textfield
       // if(txtCipher.getText().equals(null)){
        
        //Appends the text currently in the box to the one being typed
        strMessage = txtMessage.getText() + Character.toString(evt.getKeyChar());
        
       // }
        //else{
        //    strMessage = txtCipher.getText();
      //  }
        
        //Converts to Array of Char;
        
        char[] arrMessage = strMessage.toCharArray();
        //Character.isLetter(arrMessage[0]);
        
        //Gets Key
        intKey = Integer.parseInt(txtKey.getText());
        
        //Decides whether or not to encrypt or decrypt during keypresses, default is encrypt
        if(bEncryptOrDecrypt == false){
            //Decides to encrypt each key pressed
            for(intCounter = 0; intCounter < arrMessage.length; intCounter++){
                temp = arrMessage[intCounter];
            
                if(Character.isUpperCase(temp)){
                    temp = (char) (((temp - 'A' + intKey) % 26) + 'A');
                }
                if(Character.isLowerCase(temp)){
                    temp = (char) (((temp - 'a' + intKey) % 26) + 'a');
                }
            
                //if(strCipher.isEmpty()){
                //   strCipher = Character.toString(temp);
                //}
            
                strCipher = strCipher + Character.toString(temp);
            }
        }
        
        //Decides to decrypt each key pressed
        else{
            for(intCounter = 0; intCounter < arrMessage.length; intCounter++){
                temp = arrMessage[intCounter];
            
                if(Character.isUpperCase(temp)){
                    temp = (char) (((temp - 'Z' - intKey) % 26) + 'Z');
                }
                if(Character.isLowerCase(temp)){
                    temp = (char) (((temp - 'z' - intKey) % 26) + 'z');
                }
            
                //if(strCipher.isEmpty()){
                //   strCipher = Character.toString(temp);
                //}
            
                strCipher = strCipher + Character.toString(temp);
            }
        }
        
        
        txtCipher.setText(strCipher);
        
    }//GEN-LAST:event_txtMessageKeyTyped

    private void mnuRedTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRedTextActionPerformed
        //TODO add your handling code here:
        txtMessage.setForeground(Color.red);
        txtCipher.setForeground(Color.red);
        
    }//GEN-LAST:event_mnuRedTextActionPerformed

    private void mnuClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearActionPerformed
        // TODO add your handling code here:
       txtMessage.setText(strClear);
       txtCipher.setText(strClear);
       txtMessage.setForeground(Color.black);
       txtCipher.setForeground(Color.black);
    }//GEN-LAST:event_mnuClearActionPerformed

    private void cbmnuEditableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbmnuEditableActionPerformed
        // TODO add your handling code here:
        txtMessage.setEditable(edit);
        txtCipher.setEditable(edit);
        
        edit = !edit;
        
    }//GEN-LAST:event_cbmnuEditableActionPerformed
    
    
    
    boolean edit = false;
    boolean bEncryptOrDecrypt = false;
    private int intKey;
    private int intCounter;
    private char temp;
    private String strClear = null;
    private String strCipher = "";
    private String strMessage;
    //private char[] arrMessage;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JCheckBoxMenuItem cbmnuEditable;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem mnuClear;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuRedText;
    private javax.swing.JTextArea txtCipher;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextArea txtMessage;
    // End of variables declaration//GEN-END:variables
}
